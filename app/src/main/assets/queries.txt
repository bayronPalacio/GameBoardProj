// This is missing lines 1-10 of our python file...
// didn't want to include our key's etc if its on Git

db = client.GameBoardProject

@app.route('/')
def start():
    return '<h1>GAME BOARD PROJECT</h1>'

@app.route('/team',methods=['GET'])
def student_name():
    team = '<h1>Team Members</h1>'
    team += '<h2>Bayron Arturo Palacio</h2>'
    return team

@app.route('/data',methods=['GET'])
def display_data():
    if os.path.exists('customer.json'):
        with open('customer.json') as theCustomerFile:
            data = json.load(theCustomerFile)
        return render_template('jsonCustomerTable.html', n=len(data), theData=data)

@app.route('/adduser',methods=['POST'])
def add_user():
    dataFromUser = request.get_json(force=True)
    if db.user.find({'Email': dataFromUser['email']}).count() <= 0:
        db.user.insert_one({'Name':dataFromUser['firstName'],'Last':dataFromUser['lastName'],
        'Email':dataFromUser['email'],'Password':dataFromUser['password'],'Role':dataFromUser['role']})
        print("User has been created")
        response = {'responseServer': 'Yes'}
        responseToJson = json.dumps(response)
        return responseToJson
    else:
        print("User already exists")
        response = {'responseServer': 'No'}
        responseToJson = json.dumps(response)
        return responseToJson

@app.route('/login',methods=['POST'])
def verifyUser():
    userToLogin = request.get_json(force=True)
    if db.user.find({'Email' : userToLogin['email']}).count() <=0:
        print("User does not exist")
        responseLogin = {'responseLogin': 'User does not exist'}
        responseLoginToJson = json.dumps(responseLogin)
        return responseLoginToJson

    else:
        user = db.user.find_one({'Email' : userToLogin['email']})
        if(user['Password'] == userToLogin['password']):
            print("Welcome to the game ")
            responseLogin = {'responseLogin': 'Right User','name':user['Name'],'last':user['Last'],'role':user['Role']}
            responseLoginToJson = json.dumps(responseLogin)
            return responseLoginToJson
        else:
            print("Wrong password")
            responseLogin = {'responseLogin': 'Wrong Password'}
            responseLoginToJson = json.dumps(responseLogin)
            return responseLoginToJson

@app.route('/user',methods=['POST'])
def add_data():
    fname = "dummyData.json"
    dataFromUser = request.get_json(force=True)
    print(dataFromUser,flush = True)
    if os.path.isfile(fname):
        with open('dummyData.json','a') as file:
            file.seek(file.tell()-1, os.SEEK_SET)
            file.truncate()
            file.write(',\n')
            json.dump(dataFromUser,file)
            file.write(']')
    else:
        with open(fname,'w') as file:
            array = []
            array.append(dataFromUser)
            json.dump(array,file)
    return 'saved'

@app.route('/addMC',methods=['POST'])
def add_mc():
    dataFromMc = request.get_json(force=True)
    if db.mainclaim.find({'mc': dataFromMc['mc']}).count() <= 0:
        db.mainclaim.insert_one({'mc':dataFromMc['mc']})
        print("Mc has been created")
        response = {'responseServer': 'Yes'}
        responseToJson = json.dumps(response)
        return responseToJson
    else:
        print("Mc already exists")
        response = {'responseServer': 'No'}
        responseToJson = json.dumps(response)
        return responseToJson


## Create a new RiP
## Follows format - RIP_TABLE (RIP_ID, RIP_STATEMENT ,RIP_SUBMITTED_BY, RIP_VOTE, MC_ID)
@app.route('/createRip', methods=['POST'])
def add_rip():
    dataFromUser = request.get_json(force=True)
    votesFor = []
    votesAgainst = []
    db.rip.insert_one(
        {
            'rip_statement':dataFromUser['ripStatement'],
            'rip_submitted_by':dataFromUser['ripSubmittedBy'],
            'rip_vote':dataFromUser['ripVote'],
            'mc_statement':dataFromUser['mcStatement'],
            'votesFor' : votesFor,
            'votesAgainst' : votesAgainst
        }
    )
    print("RiP has been created")

    response = {'responseServer': 'Yes'}
    responseToJson = json.dumps(response)
    return responseToJson

## For displaying all RiPs for selection
@app.route('/getAllRips', methods=['GET'])
def get_rips():
    collection = db['rip'] ## The Collection - RiP Table
    jsonArray = [] ## want an array so we can access all objects
    for doc in collection.find():
        print(doc) ## for testing in terminal
        print()
        jsonArray.append(json.dumps(doc, default=str))## force ObjectID to string

    return json.dumps(jsonArray)

## only used to update the Statement
@app.route('/updateRip', methods=['POST'])
def update_rip():
    dataFromUser = request.get_json(force=True)

    ## Check if it exists
    if db.rip.find({'rip_statement': dataFromUser['oldStatement']}).count() <= 0:
        response = {'responseServer': 'Could Not Find RiP'}
        responseToJson = json.dumps(response)
        return responseToJson
    else:
        db.rip.update_one(
            { "rip_statement" : dataFromUser["oldStatement"]},
            { "$set" : {"rip_statement" : dataFromUser['ripStatement']} }
        )
        response = {'responseServer': 'Yes'}
        responseToJson = json.dumps(response)
        return responseToJson

## selected a RiP to Vote for putting into play - increment Vote?
@app.route('/incrementRipVote', methods=['POST'])
def select_rip():
    dataFromUser = request.get_json(force=True)

    if db.rip.find({'rip_statement': dataFromUser['oldStatement']}).count() <= 0:
        response = {'responseServer': 'Could Not Find RiP'}
        responseToJson = json.dumps(response)
        return responseToJson
    else:
        collection = db['rip'] ## The Collection - RiP Table
        for doc in collection.find():
            print(doc['rip_statement'] == dataFromUser['oldStatement'])
            if doc['rip_statement'] == dataFromUser['oldStatement']:
                voteTally = doc['rip_vote']
                voteTally += 1
                db.rip.update_one(
                    { "rip_statement" : dataFromUser["oldStatement"]},
                    { "$set" : {"rip_vote" : voteTally} }
                )


        response = {'responseServer': 'Yes'}
        responseToJson = json.dumps(response)
        return responseToJson

## returns the rip with the most votes and its statement
@app.route('/findWinningRip', methods=['GET'])
def select_winning_rip():
    collection = db['rip'] ## The Collection - RiP Table
    ## put all values into array - only statement and vote - sorted by votes
    jsonArray = []
    for doc in collection.find({}, {"_id": 0, "rip_vote": 1, "rip_statement": 2 }).sort("rip_vote"):
        jsonArray.append(doc)
        print(doc) ## for testing in terminal
        print()

    ## iterate through sorted array and take last value - highest
    element = 0
    for x in jsonArray:
       element = x
    print(element)

    ## return item with highest votes
    response = {'responseServer': 'Yes'}
    responseToJson = json.dumps(response)
    return json.dumps(element)

## Vote for the Rip premise - true or false
@app.route('/placeRipVote', methods=['POST'])
def rip_second_vote():
    ## need to send the current user name, their vote, the current Rip
    dataFromUser = request.get_json(force=True)

    collection = db['rip']
    jsonArray = []
    for doc in collection.find({}, {"_id": 0, "rip_statement": 1, "votesFor": 2, "votesAgainst": 3 }): ## _id isn't included...
        jsonArray.append(doc)
        print(doc)
        if doc['rip_statement'] == dataFromUser['currentRip']:
            item = doc

    ## have to check if user name is in either votesFor or VotesAgainst
    ## if found delete then place vote


    response = {'responseServer': 'Yes'}
    responseToJson = json.dumps(response)
    return json.dumps(response)

//**************NEW ADDMC AND GET MC ****************//
@app.route('/addMC',methods=['POST'])
def add_mc():
    dataFromMc = request.get_json(force=True)
    if db.mainclaim.count() <= 0:
        db.mainclaim.insert_one({'mc':dataFromMc['mc']})
        print("Mc has been created")
        response = {'responseServer': 'Yes'}
        responseToJson = json.dumps(response)
        return responseToJson
    else:
        print("Mc will be updated")
        cursor = db.mainclaim.find({})
        for document in cursor:
            print(document['_id'])
            db.mainclaim.update_one(
                {'_id':document['_id']},
                {'$set':
                    {'mc':dataFromMc['mc']}

                })
        response = {'responseServer': 'Updated'}
        responseToJson = json.dumps(response)
        return responseToJson


@app.route('/getMC',methods=['GET'])
def get_mc():
    if db.mainclaim.count() > 0:
        index = db.mainclaim.find({})
        for originalMC in index:
            print(originalMC['mc'])
            mainClaim = originalMC['mc']
        return mainClaim
    else:
        return "NoMC"

@app.route('/setTime',methods=['POST'])
def set_time():
    dataFromTime = request.get_json(force=True)
    if db.time.count() <= 0:
        db.time.insert_one({'time':dataFromTime['time']})
        print("Time has been created")
        response = {'responseServer': 'Yes'}
        responseToJson = json.dumps(response)
        return responseToJson
    else:
        print("Time will be updated")
        cursor = db.time.find({})
        for document in cursor:
            print(document['_id'])
            db.time.update_one(
                {'_id':document['_id']},
                {'$set':
                    {'time':dataFromTime['time']}

                })
        response = {'responseServer': 'Updated'}
        responseToJson = json.dumps(response)
        return responseToJson





if __name__ == '__main__':
    app.run(host='0.0.0.0',debug=True)