// This is missing lines 1-10 of our python file...
// didn't want to include our key's etc if its on Git

from flask import Flask, request, render_template
from pymongo import MongoClient
import os
import json

app = Flask(__name__)

app.config.update(dict(SECRET_KEY=''))
client = MongoClient()

db = client.GameBoardProject

@app.route('/')
def start():
    return '<h1>GAME BOARD PROJECT</h1>'


@app.route('/user',methods=['POST'])
def add_data():

    fname = "dummyData.json"
    dataFromUser = request.get_json(force=True)
    print(dataFromUser,flush = True)
    if os.path.isfile(fname):
        with open('dummyData.json','a') as file:
            file.seek(file.tell()-1, os.SEEK_SET)
            file.truncate()
            file.write(',\n')
            json.dump(dataFromUser,file)
            file.write(']')
    else:
        with open(fname,'w') as file:
            array = []
            array.append(dataFromUser)
            json.dump(array,file)
    return 'saved'

## User Creation and Validation Queries

@app.route('/adduser',methods=['POST'])
def add_user():
    dataFromUser = request.get_json(force=True)
    if db.user.find({'Email': dataFromUser['email']}).count() <= 0:
        db.user.insert_one({'Name':dataFromUser['firstName'],'Last':dataFromUser['lastName'],
        'Email':dataFromUser['email'],'Password':dataFromUser['password'],'Role':dataFromUser['role']})
        print("User has been created")
        response = {'responseServer': 'Yes'}
        responseToJson = json.dumps(response)
        return responseToJson
    else:
        print("User already exists")
        response = {'responseServer': 'No'}
        responseToJson = json.dumps(response)
        return responseToJson

@app.route('/login',methods=['POST'])
def verifyUser():
    userToLogin = request.get_json(force=True)
    if db.user.find({'Email' : userToLogin['email']}).count() <=0:
        print("User does not exist")
        responseLogin = {'responseLogin': 'User does not exist'}
        responseLoginToJson = json.dumps(responseLogin)
        return responseLoginToJson

    else:
        user = db.user.find_one({'Email' : userToLogin['email']})
        if(user['Password'] == userToLogin['password']):
            print("Welcome to the game ")
            responseLogin = {'responseLogin': 'Right User','name':user['Name'],'last':user['Last'],'role':user['Role']}
            responseLoginToJson = json.dumps(responseLogin)
            return responseLoginToJson

        else:
            print("Wrong password")
            responseLogin = {'responseLogin': 'Wrong Password'}
            responseLoginToJson = json.dumps(responseLogin)
            return responseLoginToJson



## Main Claim


@app.route('/addMC',methods=['POST'])
def add_mc():
    dataFromMc = request.get_json(force=True)
    if db.mainclaim.count() <= 0:
        #remove previous votes
        db.voteMC.delete_many({})
        db.mainclaim.insert_one({'mc':dataFromMc['mc']})
        print("Mc has been created")
        response = {'responseServer': 'Yes'}
        responseToJson = json.dumps(response)
        return responseToJson
    else:
        print("Mc will be updated")
        #remove previous votes
        db.voteMC.delete_many({})
        cursor = db.mainclaim.find({})
        for document in cursor:
            print(document['_id'])
            db.mainclaim.update_one(
                {'_id':document['_id']},
                {'$set':
                    {'mc':dataFromMc['mc']}

                })
        response = {'responseServer': 'Updated'}
        responseToJson = json.dumps(response)
        return responseToJson


#Get MC
@app.route('/getMC',methods=['GET'])
def get_mc():
    if db.mainclaim.count() > 0:
        index = db.mainclaim.find({})
        for originalMC in index:
            print(originalMC['mc'])
            mainClaim = originalMC['mc']
        return mainClaim
    else:
        return "MC has not been found"

#Vote MC and create groups
@app.route('/voteMC',methods=['POST'])
def mc_vote():
    voteFromUser = request.get_json(force=True)
    if voteFromUser['vote'] == 'Agree':
        print('agree vote')
        db.voteMC.insert_one({'user':voteFromUser['student'],'vote':voteFromUser['vote']})
        response = {'responseServer': 'Agree'}
        responseToJson = json.dumps(response)
        return responseToJson
    elif voteFromUser['vote'] == 'Disagree':
        print('disagree vote')
        db.voteMC.insert_one({'user':voteFromUser['student'],'vote':voteFromUser['vote']})
        response = {'responseServer': 'Disagree'}
        responseToJson = json.dumps(response)
        return responseToJson
    elif voteFromUser['vote'] == 'getTotalVotes':
        cursor = db.voteMC.find({})
        agreeVote = 0
        disagreeVote = 0
        agreeStudents = []
        disagreeStudents = []
        for vote in cursor:
            if vote['vote'] == 'Agree':
                agreeVote = agreeVote + 1
                agreeStudents.append(vote['user'])
            else:
                disagreeVote = disagreeVote + 1
                disagreeStudents.append(vote['user'])
        totalVotes = agreeVote + disagreeVote
        print(totalVotes)
        print(agreeStudents)
        print(disagreeStudents)
        studentsGroup = []
        for index in range(totalVotes):
            agreeLenght = len(agreeStudents)
            disagreeLenght = len(disagreeStudents)
            if (agreeLenght >= 1):
                studentsGroup.append(agreeStudents.pop())
            if (disagreeLenght >= 1):
                studentsGroup.append((disagreeStudents.pop()))
        print(studentsGroup)
        print(voteFromUser)
        members = int(voteFromUser['numberOfMembers'])
        if(members > 0):
            print(voteFromUser['numberOfMembers'])
            groupNumber = 0
            for count in range(len(studentsGroup)):
                if(count % members == 0):
                    groupNumber = groupNumber + 1
                print(studentsGroup[count] + " belongs to group -> " + str(groupNumber))
                db.user.update_one(
                    { "Email" : studentsGroup[count]},
                    { "$set" : {"groupNumber" : groupNumber }
                    })
        response = {'Agree votes': agreeVote,'Disagree votes': disagreeVote}
        responseToJson = json.dumps(response)
        return responseToJson

#Get group Number
@app.route('/groupNumber',methods=['POST'])
def group():
    userEmail = request.get_json(force=True)
    if db.user.find({'Email' : userEmail['Email']}).count() <=0:
        print("User does not exist")
        responseGroup = {'responseGroup': 'User does not exist'}
        responseGroupToJson = json.dumps(responseGroup)
        return responseGroupToJson
    else:
        user = db.user.find_one({'Email' : userEmail['Email']})
        responseGroup = {'responseGroup': user['groupNumber']}
        responseGroupToJson = json.dumps(responseGroup)
        return responseGroupToJson


#Get group Number
@app.route('/getFinalMCVote', methods=['POST'])
def get_final_mc_vote():
    ## find current user's group
    dataFromUser = request.get_json(force=True)
    cursor = db.user.find({})
    for x in cursor:
        if(x['Email'] == dataFromUser[0]):
            groupNumber = x['groupNumber']

    ## Get all members in group
    groupMembers = []
    for member in db.user.find( {"groupNumber": groupNumber}):
        email = member['Email']
        name = member['Name'] + " " + member['Last']
        groupMembers.append({'email' : email, 'name' : name})

    collection = db['voteMC']
    vote = []
    for x in groupMembers:
        for doc in collection.find({'user': x['email']}):
            vote.append(doc['vote'])

    i = 0
    while i < len(groupMembers):
        groupMembers[i].update({'vote' : vote[i]})
        i += 1

    response = {'responseServer': 'Rip Vote Tallies have been reset'}
    responseToJson = json.dumps(response)
    print(groupMembers)
    return json.dumps(groupMembers)


## TIMER


@app.route('/setTime',methods=['POST'])
def set_time():
    dataFromTime = request.get_json(force=True)
    if db.time.count() <= 0:
        db.time.insert_one({'time':dataFromTime['time']})
        print("Time has been created")
        response = {'responseServer': 'Yes'}
        responseToJson = json.dumps(response)
        return responseToJson
    else:
        print("Time will be updated")
        cursor = db.time.find({})
        for document in cursor:
            print(document['_id'])
            db.time.update_one(
                {'_id':document['_id']},
                {'$set':
                    {'time':dataFromTime['time']}

                })
        response = {'responseServer': 'Updated'}
        responseToJson = json.dumps(response)
        return responseToJson

@app.route('/getTime', methods=['GET'])
def get_time():
    collection = db['time']
    if db.time.find().count() <= 0:
        response = {'responseServer': 'No Timer'}
        responseToJson = json.dumps(response)
        return responseToJson
    else:
        for doc in db.time.find():
             response = doc['time']
        responseToJson = json.dumps(response)
        return json.dumps(response)



## Reason In Play



## Create a new RiP
## Follows format - RIP_TABLE (RIP_ID, RIP_STATEMENT ,RIP_SUBMITTED_BY, RIP_VOTE, MC_ID)
@app.route('/createRip', methods=['POST'])
def add_rip():
    dataFromUser = request.get_json(force=True)
    votesFor = []
    votesAgainst = []
    db.rip.insert_one(
        {
            'rip_statement':dataFromUser['ripStatement'],
            'rip_submitted_by':dataFromUser['ripSubmittedBy'],
            'rip_vote':dataFromUser['ripVote'],
            'mc_statement':dataFromUser['mcStatement'],
            'votesFor' : votesFor,
            'votesAgainst' : votesAgainst
        }
    )
    print("RiP has been created")

    response = {'responseServer': 'Yes'}
    responseToJson = json.dumps(response)
    return responseToJson

## For displaying all RiPs for selection
@app.route('/getAllRips', methods=['GET'])
def get_rips():
    collection = db['rip'] ## The Collection - RiP Table
    jsonArray = [] ## want an array so we can access all objects
    for doc in collection.find():
        print(doc) ## for testing in terminal
        print()
        jsonArray.append(json.dumps(doc, default=str))## force ObjectID to string

    return json.dumps(jsonArray)

## only used to update the Statement
@app.route('/updateRip', methods=['POST'])
def update_rip():
    dataFromUser = request.get_json(force=True)

    ## Check if it exists
    if db.rip.find({'rip_statement': dataFromUser['oldStatement']}).count() <= 0:
        response = {'responseServer': 'Could Not Find RiP'}
        responseToJson = json.dumps(response)
        return responseToJson
    else:
        db.rip.update_one(
            { "rip_statement" : dataFromUser["oldStatement"]},
            { "$set" : {"rip_statement" : dataFromUser['ripStatement']} }
        )
        response = {'responseServer': 'Yes'}
        responseToJson = json.dumps(response)
        return responseToJson

## selected a RiP to Vote for putting into play - increment Vote?
@app.route('/incrementRipVote', methods=['POST'])
def select_rip():
    dataFromUser = request.get_json(force=True)

    if db.rip.find({'rip_statement': dataFromUser['oldStatement']}).count() <= 0:
        response = {'responseServer': 'Could Not Find RiP'}
        responseToJson = json.dumps(response)
    else:
        collection = db['rip'] ## The Collection - RiP Table
        for doc in collection.find():
            print(doc['rip_statement'] == dataFromUser['oldStatement'])
            if doc['rip_statement'] == dataFromUser['oldStatement']:
                voteTally = doc['rip_vote']
                voteTally += 1
                db.rip.update_one(
                    { "rip_statement" : dataFromUser["oldStatement"]},
                    { "$set" : {"rip_vote" : voteTally} }
                )


        response = {'responseServer': 'Yes'}
        responseToJson = json.dumps(response)
    return responseToJson

## reset all Rip Votes
@app.route('/resetRipVote', methods=['POST'])
def reset_rip_votes():
    ## find current user's group
    dataFromUser = request.get_json(force=True)
    cursor = db.user.find({})
    for x in cursor:
        if(x['Email'] == dataFromUser["userEmail"]):
            groupNumber = x['groupNumber']

    ## Get all members in group
    groupMembers = []
    for member in db.user.find( {"groupNumber": groupNumber}):
        name = member['Name'] + " " + member['Last']
        groupMembers.append(name)
        print(name)

    ## find rips created by group members - set votes to 0
    collection = db['rip']
    for member in groupMembers:
        for doc in collection.find({'rip_submitted_by': member}):
            db.rip.update_one(
                { "rip_statement" : doc["rip_statement"]},
                { "$set" :
                    {"rip_vote" : 0 }
                })

    response = {'responseServer': 'Rip Vote Tallies have been reset'}
    responseToJson = json.dumps(response)
    return responseToJson

## returns the rip with the most votes and its statement
@app.route('/findWinningRip', methods=['GET'])
def select_winning_rip():
    collection = db['rip'] ## The Collection - RiP Table
    ## put all values into array - only statement and vote - sorted by votes
    jsonArray = []
    for doc in collection.find({}, {"_id": 0, "rip_vote": 1, "rip_statement": 2 }).sort("rip_vote"):
        jsonArray.append(doc)
        print(doc) ## for testing in terminal
        print()

    ## iterate through sorted array and take last value - highest
    element = 0
    for x in jsonArray:
       element = x
    print(element)

    ## return item with highest votes
    response = {'responseServer': 'Yes'}
    responseToJson = json.dumps(response)
    return json.dumps(element)

## Vote for the Rip premise - true or false
@app.route('/placeRipVote', methods=['POST'])
def place_rip_second_vote():
    ## need to send the current user name, their vote, the current Rip
    dataFromUser = request.get_json(force=True)
    collection = db['rip']
    print(dataFromUser['currentUser'] + dataFromUser['vote'] + dataFromUser['currentRip'])

    arrayOfEntities = []
    jsonArrayOfVotesFor = []
    jsonArrayOfVotesAgainst = []

    for doc in collection.find({}, {"_id": 0, "rip_statement": 1, "votesFor": 2, "votesAgainst": 3 }): ## _id isn't included...
        arrayOfEntities.append(doc)
        print(doc)
        if doc['rip_statement'] == dataFromUser['currentRip']:
            item = doc
            jsonArrayOfVotesFor = item['votesFor']
            jsonArrayOfVotesAgainst = item['votesAgainst']

    ## have to check if user name is in either votesFor or VotesAgainst - remove if found
    for x in jsonArrayOfVotesFor:
        if dataFromUser['currentUser'] in x:
            jsonArrayOfVotesFor.remove(dataFromUser['currentUser'])
            db.rip.update_one(
            { "rip_statement" : dataFromUser["currentRip"]},
            { "$set" :
                {"votesFor" : jsonArrayOfVotesFor }

        })

    for x in jsonArrayOfVotesAgainst:
        if dataFromUser['currentUser'] in x:
            jsonArrayOfVotesAgainst.remove(dataFromUser['currentUser'])
            db.rip.update_one(
            { "rip_statement" : dataFromUser["currentRip"]},
            { "$set" :
                {"votesAgainst" : jsonArrayOfVotesAgainst }

            })

    ## if vote is true update votesFor
    if dataFromUser['vote'] == "True":
        jsonArrayOfVotesFor.append(dataFromUser['currentUser'])
        db.rip.update_one(
            { "rip_statement" : dataFromUser["currentRip"]},
            { "$set" :
                {"votesFor" : jsonArrayOfVotesFor }

        })
        response = {'responseServer': 'VotesFor Updated'}
        responseToJson = json.dumps(response)
        return json.dumps(response)
    ## if vote is false update votesAgainst
    elif dataFromUser['vote'] == "False":
        jsonArrayOfVotesAgainst.append(dataFromUser['currentUser'])
        db.rip.update_one(
            { "rip_statement" : dataFromUser["currentRip"]},
            { "$set" :
                {"votesAgainst" : jsonArrayOfVotesAgainst }

        })
        response = {'responseServer': 'VotesAgainst Updated'}
        responseToJson = json.dumps(response)
        return json.dumps(response)
    else:
        response = {'responseServer': 'Update Failed'}
        responseToJson = json.dumps(response)
        return json.dumps(response)


## Get the vote arrays of final votes
@app.route('/getFinalRipVote', methods=['GET'])
def get_rip_second_vote():
    ## will need to send the current rip statement
    ## dataFromUser = request.get_json(force=True)
    collection = db['rip']
    arrayOfEntities = []

    for doc in collection.find({}, {"_id": 0, "rip_statement": 1, "votesFor": 2, "votesAgainst": 3 }):
        arrayOfEntities.append(doc)
        if doc['rip_statement'] == 'A new rip':
            item = doc
            ## Test
            print("this is the selected item: " + json.dumps(item))
            return json.dumps(item)
    ## If RiP does not exist
    response = {'responseServer': 'RiP does not exist'}
    responseToJson = json.dumps(response)
    return json.dumps(response)




@app.route('/getGroupMembers', methods=['POST'])
def get_group_members():
    dataFromUser = request.get_json(force=True)

    collection = db['user']
    totalMembers = db.user.find({ 'groupNumber'  : dataFromUser['groupNumber']})
    return json.dumps(totalMembers)


if __name__ == '__main__':
    app.run(host='0.0.0.0',debug=True)